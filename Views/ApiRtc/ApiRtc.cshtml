
@{
    ViewData["Title"] = "ApiRtc";
    //Layout = null;
}



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>apiRTC Client</title>

    <!-- Compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    @*<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.1/css/materialize.min.css">*@
    <style>
        body {
            display: flex;
            min-height: 100vh;
            flex-direction: column;
        }

        .btn-open {
            height: auto;
            line-height: inherit;
            padding: 15px 25px;
        }

        main {
            flex: 1 0 auto;
        }

        .container.master {
            padding: 50px;
        }

        .fa {
            display: inline-block !important;
        }

        footer {
            margin-top: 0 !important;
        }

        #remote {
            position: relative !important;
            margin: 25px 0;
        }

        #command form input[type="texte"] {
            display: block;
            border: 2px solid rgb(74, 74, 74);
            padding: 3px 20px;
            margin-bottom: 10px;
            border-radius: 6px;
        }

        .container.formu #hangup,
        .container.formu #accept,
        .container.formu #refuse,
        .container.formu #call {
            background: transparent;
            border: none;
        }

        #addressBookDropDown {
            position: absolute;
            background: #e6e6e6;
            padding: 5px 0;
            margin-top: 5px;
            border-radius: 5px;
            z-index: 100;
        }

            #addressBookDropDown li {
                color: #4a4a4a;
                padding: 2px 15px;
            }

                #addressBookDropDown li a {
                    color: #4a4a4a;
                }

                #addressBookDropDown li:hover {
                    background: #d6d6d6;
                }
    </style>
    <script src="https://cloud.apizee.com/apiRTC/apiRTC-latest.min.js"></script>
</head>

<body>
    <main class="container grey lighten-5">
        <div class="container master grey lighten-5">
            <div class="row">
                <div class="col s12 m12 l12">
                    <div class="col s12">
                        <div class="input-field">
                            <button type="button" id="addressBook" class="btn btn-success" style="display:none;">
                                <i class="fa fa-book"></i>
                            </button>
                            <ul id="addressBookDropDown" style="display:none;">
                                <li><a id="client1" href="#">client1</a></li>
                                <li><a id="client2" href="#">client2</a></li>
                            </ul>
                            <button type="button" id="callVideo" class="btn btn-success" >
                                <i class="fa fa-phone"></i>
                            </button>
                            <input id="hangup" class="btn red" type="button" disabled="true" value="Hangup" />
                            <!--Accept-Refuse-->
                            @*<input id="accept" class="btn green" type="button" disabled="true" value="Accept Call" />
                            <input id="refuse" class="btn red" type="button" disabled="true" value="Refuse Call" />*@

                            <input type="text" id="number" style="margin-top:25px;" class="form-control" disabled  placeholder="Username" aria-describedby="sizing-addon1">
                        </div>
                    </div>

                    <div class="col s12 m6 l6">
                        <div id="hangupButtons"></div>
                    </div>
                </div>
            </div>

            <div class="row" >
                <div class="col s12 m12 l12">
                    <span id="status"></span>
                    <span id="status2"></span>
                </div>
            </div>
            <br>
            <div class="row">
                <div id="remote" style="width:100%;"></div>
                <div id="mini"></div>
            </div>
        </div><!-- /.container -->
    </main>
    
    <!-- Compiled and minified JavaScript -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.1/js/materialize.min.js"></script>
    <script>
        'use strict';
        var session = null,
            webRTCClient = null,
            connectedUsersList = [],
            //Accept-Refuse
            incomingCallId = 0;


        function selectPhonebookItem(idItem) {
            $("#number").val(idItem);
            $("#addressBookDropDown").toggle();
        }

        //Function to add media stream in Div
        function addStreamInDiv(stream, callType, divId, mediaEltId, style, muted) {

            var mediaElt = null,
                divElement = null;

            if (callType === 'audio') {
                mediaElt = document.createElement("audio");
            } else {
                mediaElt = document.createElement("video");
            }
            mediaElt.id = mediaEltId;
            mediaElt.autoplay = true;
            mediaElt.muted = muted;

            mediaElt.style.width = style.width;
            mediaElt.style.height = style.height;

            //Patch for ticket on Chrome 61 Android : https://bugs.chromium.org/p/chromium/issues/detail?id=769148
            if (apiRTC.browser === 'Chrome' && apiRTC.browser_major_version === '61' && apiRTC.osName === "Android") {
                mediaElt.style.borderRadius = "1px";
                console.log('Patch for video display on Chrome 61 Android');
            }

            divElement = document.getElementById(divId);
            divElement.appendChild(mediaElt);

            webRTCClient.attachMediaStream(mediaElt, stream);
        }

        //Function to remove media stream element
        function removeElementFromDiv(divId, eltId) {

            var element = null,
                divElement = null;

            element = document.getElementById(eltId);
            if (element !== null) {
                console.log('Removing video element with Id : ' + eltId);
                divElement = document.getElementById(divId);
                divElement.removeChild(element);
            }
        }

        function initMediaElementState(callId) {
            //function that remove media element on hangup

            //You can decide to manage your own stream display function or use the integrated one of ApiRTC
            /*
                removeElementFromDiv('mini', 'miniElt-' + callId)
                removeElementFromDiv('remote', 'remoteElt-' + callId)
            */
            webRTCClient.removeElementFromDiv('mini', 'miniElt-' + callId);
            webRTCClient.removeElementFromDiv('remote', 'remoteElt-' + callId);
        }

        function addHangupButton(callId) {
            var hangupButtons = document.getElementById("hangupButtons"),
                input = document.createElement("input");

            input.setAttribute("id", "hangup-" + callId);
            input.setAttribute("value", "hangup-" + callId);
            input.setAttribute("type", "button");
            input.setAttribute("onclick", "webRTCClient.hangUp(" + callId + " );");
            hangupButtons.appendChild(input);
        }

        function removeHangupButton(callId) {
            var hangupButtonId = 'hangup-' + callId,
                hangupButton = document.getElementById(hangupButtonId),
                hangupButtons = null;

            if (hangupButton !== null) {
                console.log('Removing hangUpButton with Id : ' + hangupButtonId);
                hangupButtons = document.getElementById("hangupButtons");
                hangupButtons.removeChild(hangupButton);
            }
        }

        function userMediaErrorHandler(e) {
            $("#call").attr("disabled", false).val("Call");
            $("#hangup").attr("disabled", false).val("Hangup");
        }

        function hangupHandler(e) {
            console.log('hangupHandler :' + e.detail.callId);

            if (e.detail.lastEstablishedCall === true) {
                $("#call").attr("disabled", false).val("Call");
            }
            console.log(e.detail.reason);

            initMediaElementState(e.detail.callId);
            removeHangupButton(e.detail.callId);
        }

        function incomingCallHandler(e) {
            $("#hangup").attr("disabled", false).val("Hangup");
            $("#accept").attr("disabled", false).val("Accept");
            $("#refuse").attr("disabled", false).val("Refuse");
            addHangupButton(e.detail.callId);
            //Accept-Refuse
            incomingCallId = e.detail.callId;
        }

        function userMediaSuccessHandler(e) {
            console.log("userMediaSuccessHandler e.detail.callId :" + e.detail.callId);
            console.log("userMediaSuccessHandler e.detail.callType :" + e.detail.callType);
            console.log("userMediaSuccessHandler e.detail.remoteId :" + e.detail.remoteId);

            //Adding local Stream in Div. Video is muted

            //You can decide to manage your own stream display function or use the integrated one of ApiRTC
            /*
                addStreamInDiv(e.detail.stream, e.detail.callType, "mini", 'miniElt-' + e.detail.callId,
                               {width : "160px", height : "120px"}, true);
            */
            webRTCClient.addStreamInDiv(e.detail.stream, e.detail.callType, "mini", 'miniElt-' + e.detail.callId,
                { width: "128px", height: "96px" }, true);
        }

        function remoteStreamAddedHandler(e) {
            console.log("remoteStreamAddedHandler, e.detail.callId :" + e.detail.callId);
            console.log("remoteStreamAddedHandler, e.detail.callType :" + e.detail.callType);
            console.log("userMediaSuccessHandler e.detail.remoteId :" + e.detail.remoteId);

            //Adding Remote Stream in Div. Video is not muted

            //You can decide to manage your own stream display function or use the integrated one of ApiRTC
            /*
                addStreamInDiv(e.detail.stream, e.detail.callType, "remote", 'remoteElt-' + e.detail.callId,
                               {width : "640px", height : "480px"}, false);
            */
            webRTCClient.addStreamInDiv(e.detail.stream, e.detail.callType, "remote", 'remoteElt-' + e.detail.callId,
                { width: "640px", height: "480px" }, false);
        }

        function updateAddressBook() {
            console.log("updateAddressBook");
            var length = connectedUsersList.length,
                i = 0;

            //Cleaning addressBook list
            $("#addressBookDropDown").empty();

            for (i = 0; i < length; i += 1) {

                //Checking if connectedUser is not current user befire adding in addressBook list
                if (connectedUsersList[i].userId !== apiRTC.session.apiCCId) {

                    if (connectedUsersList[i].group !== undefined) {

                        $("#addressBookDropDown").append('<li><a href="#" onclick="selectPhonebookItem(' + connectedUsersList[i].userId + ')">' + connectedUsersList[i].userId + ' - ' + connectedUsersList[i].group + '</a></li>');
                    } else {
                        $("#addressBookDropDown").append('<li><a href="#" onclick="selectPhonebookItem(' + connectedUsersList[i].userId + ')">' + connectedUsersList[i].userId + '</a></li>');
                    }
                }
            }
        }

        function connectedUsersListUpdateHandler(e) {
            console.log("connectedUsersListUpdateHandler, e.detail.group :" + e.detail.group);

            //getting complete connectedUsersList
            //connectedUsersList = apiRTC.session.getConnectedUsersList();

            //getting connectedUsersList of updated group
            //connectedUsersList = apiRTC.session.getConnectedUsersList(e.detail.group);

            connectedUsersList = apiRTC.session.getConnectedUserIdsList();
            //console.log("connectedUsersList.length :" + connectedUsersList.length);

            //Updating addressBook
            updateAddressBook();
        }

        function webRTCClientCreatedHandler(e) {
            console.log('webRTCClientCreatedHandler');
        }

        //sessionReadyHandler : apiRTC is now connected
        function sessionReadyHandler(e) {
            console.log('sessionReadyHandler :' + apiRTC.session.apiCCId);
            const Mobileno = sessionStorage.getItem("Mobileno");
            $("#number").val(Mobileno);
            $("#call").attr("disabled", false).val("Call");   //Modification of Call button when phone is registered on Apizee

            apiRTC.addEventListener("userMediaSuccess", userMediaSuccessHandler);
            apiRTC.addEventListener("incomingCall", incomingCallHandler);
            apiRTC.addEventListener("userMediaError", userMediaErrorHandler);
            apiRTC.addEventListener("hangup", hangupHandler);
            apiRTC.addEventListener("remoteStreamAdded", remoteStreamAddedHandler);
            //connectedUsersList
            apiRTC.addEventListener("connectedUsersListUpdate", connectedUsersListUpdateHandler);
            //connectedUsersList
            apiRTC.addEventListener("webRTCClientCreated", webRTCClientCreatedHandler);

            //webRTC Client creation
            webRTCClient = apiRTC.session.createWebRTCClient({
                status: "status" //Optionnal
            });

            //Multi calls Activation
            webRTCClient.setAllowMultipleCalls(true);

            //Bandwitdh limitation
            webRTCClient.setVideoBandwidth(300);

            //Accept-Refuse
            webRTCClient.setUserAcceptOnIncomingCall(true);

            //Call establishment
            $("#callVideo").click(function () {
                $("#hangup").attr("disabled", false).val("Hangup");
                var callId = webRTCClient.call($("#number").val());

                console.log("callId on call =" + callId);
                if (callId != null) {
                    addHangupButton(callId);
                }
            });

            //Global hangup management : all established client calls will be hangup
            $("#hangup").click(function () {
                $("#call").attr("disabled", false).val("Call");
                webRTCClient.hangUp();
            });

            //Accept-Refuse
            $("#accept").click(function () {
                $("#accept").attr("disabled", true).val("Accept");
                $("#refuse").attr("disabled", true).val("Refuse");
                webRTCClient.acceptCall(incomingCallId);
            });

            $("#refuse").click(function () {
                $("#accept").attr("disabled", true).val("Accept");
                $("#refuse").attr("disabled", true).val("Refuse");
                $("#hangup").attr("disabled", true).val("Hangup");
                webRTCClient.refuseCall(incomingCallId);

                initMediaElementState(incomingCallId);
                removeHangupButton(incomingCallId);
            });
        }

        $("#addressBook").on('click', function () {
            $("#addressBookDropDown").toggle();
        });

        //apiRTC initialization
        apiRTC.init({
            apiKey: "8cd37a5f63a3b3473833f66835dbec45",
            apiCCId: sessionStorage.getItem("DocMobileno"),
            onReady: sessionReadyHandler
        });
    </script>
</body>
</html>